/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package SalesManager;

import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author isabelle
 */
public class CreatePurchaseRequisitionPanel extends javax.swing.JPanel {
    private final DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private final String[] columnName = {"Purchase Requisition ID", "Item ID", "Item Name", "Quantity Requested"};
    private int row = -1;
    private List<String> itemNames =  new ArrayList<>();
    private final PurchaseRequisition purchaseRequisition = new PurchaseRequisition();
    private final String userId;
    private String nextPurchaseRequisitionId;
    /**
     * Creates new form SalesManagerPurchaseRequisition
     * @param userId
     */
    public CreatePurchaseRequisitionPanel(String userId) {
        this.userId = userId;
        model.setColumnIdentifiers(columnName);
        
        initComponents();
        
        updatePurchaseRequisitionId();
        updateItemIdComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        spinnerQuantityRequested = new javax.swing.JSpinner();
        btnDeleteNewPurchaseRequisition = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnEditNewPurchaseRequisition = new javax.swing.JButton();
        txtItemName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnClearNewPurchaseRequisition = new javax.swing.JButton();
        btnAddNewPurchaseRequisition = new javax.swing.JButton();
        btnSaveNewPurchaseRequisitionToFile = new javax.swing.JButton();
        btnClearSearch = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboBoxItemId = new javax.swing.JComboBox<>();
        txtPurchaseRequisitionId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSearchBar = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        lblWelcome4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblWelcome4.setText("Create Purchase Requisition");

        jLabel7.setText("Search Bar:");

        btnDeleteNewPurchaseRequisition.setText("Delete");
        btnDeleteNewPurchaseRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNewPurchaseRequisitionActionPerformed(evt);
            }
        });

        jTable2.setModel(model);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        btnEditNewPurchaseRequisition.setText("Edit");
        btnEditNewPurchaseRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNewPurchaseRequisitionActionPerformed(evt);
            }
        });

        txtItemName.setEditable(false);
        txtItemName.setBackground(new java.awt.Color(204, 204, 204));
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantity Requested:");

        btnClearNewPurchaseRequisition.setText("Clear");
        btnClearNewPurchaseRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearNewPurchaseRequisitionActionPerformed(evt);
            }
        });

        btnAddNewPurchaseRequisition.setText("Add");
        btnAddNewPurchaseRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewPurchaseRequisitionActionPerformed(evt);
            }
        });

        btnSaveNewPurchaseRequisitionToFile.setText("Save to File");
        btnSaveNewPurchaseRequisitionToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveNewPurchaseRequisitionToFileActionPerformed(evt);
            }
        });

        btnClearSearch.setText("Clear");
        btnClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Item ID:");

        jLabel6.setText("Purchase Requisition ID:");

        comboBoxItemId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemIdItemStateChanged(evt);
            }
        });

        txtPurchaseRequisitionId.setEditable(false);
        txtPurchaseRequisitionId.setBackground(new java.awt.Color(204, 204, 204));
        txtPurchaseRequisitionId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPurchaseRequisitionIdActionPerformed(evt);
            }
        });

        jLabel3.setText("Item Name:");

        txtSearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBarActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("IMPORTANT: Only items that have a stock level BELOW their respective reorder level will appear as an option in the Item Id list");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnClearSearch)
                                .addGap(78, 78, 78))
                            .addComponent(jSeparator1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPurchaseRequisitionId, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBoxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(50, 50, 50)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(39, 39, 39)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(spinnerQuantityRequested, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 46, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(134, 134, 134)
                                                .addComponent(btnClearNewPurchaseRequisition)
                                                .addGap(17, 17, 17)
                                                .addComponent(btnDeleteNewPurchaseRequisition)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnEditNewPurchaseRequisition)
                                                .addGap(14, 14, 14)
                                                .addComponent(btnAddNewPurchaseRequisition))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnSaveNewPurchaseRequisitionToFile)))
                                .addGap(50, 50, 50))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 936, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblWelcome4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblWelcome4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(comboBoxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtPurchaseRequisitionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spinnerQuantityRequested, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDeleteNewPurchaseRequisition)
                                .addComponent(btnClearNewPurchaseRequisition))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAddNewPurchaseRequisition)
                                .addComponent(btnEditNewPurchaseRequisition)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnClearSearch)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSaveNewPurchaseRequisitionToFile)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updatePurchaseRequisitionId() {
        // create next record id
        txtPurchaseRequisitionId.setText(purchaseRequisition.nextRecordId());
    }
        
    private void updateNewPurchaseRequisitionId() {
        // get the previous new purchase requisition id and slice to get only the number 
        String previousNewPurchaseRequisitionId = txtPurchaseRequisitionId.getText().substring(2);

        // convert the string to int and increment by one
        int newPurchaseRequisitionIdNum = Integer.parseInt(previousNewPurchaseRequisitionId) + 1;
        
        // create the new sale id
        int idPaddingSize = 4;
        String idNum = String.format("%0" + idPaddingSize + "d", newPurchaseRequisitionIdNum);
        String purchaseRequisitionId = String.join("", "PR", idNum);
        
        // assign new sale id to text box
        txtPurchaseRequisitionId.setText(purchaseRequisitionId);
        nextPurchaseRequisitionId = purchaseRequisitionId;
    }    
    
    private void updateItemIdComboBox() {
        List<String> itemIds =  new ArrayList<>();
        List<Integer> stockLevels =  new ArrayList<>();
        List<Integer> reorderLevels =  new ArrayList<>();
        
        Map<String,List<?>> map = purchaseRequisition.updateItemSelectionList(itemNames, itemIds, stockLevels, reorderLevels);
        
        itemNames = (List<String>) map.get("itemNames");
        itemIds = (List<String>) map.get("itemIds");
        stockLevels = (List<Integer>) map.get("stockLevels");
        reorderLevels = (List<Integer>) map.get("reorderLevels");

        int count = itemIds.size();
        for (int i = 0; i < count; i++) {
            if (stockLevels.get(i) < reorderLevels.get(i)) {
                comboBoxItemId.addItem(itemIds.get(i));
            }
        }
        
        // set initial item selected
        comboBoxItemId.setSelectedIndex(-1);
        txtItemName.setText("");
    }
    
    private void clearTextField() {
        txtItemName.setText("");
        comboBoxItemId.setSelectedIndex(-1);
        spinnerQuantityRequested.setValue(0);
    }
    
    
    
    private void btnDeleteNewPurchaseRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNewPurchaseRequisitionActionPerformed
        if(row==-1){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        }
        else {
            model.removeRow(row);
            clearTextField();
            row=-1;
            txtPurchaseRequisitionId.setText(nextPurchaseRequisitionId);
        }
    }//GEN-LAST:event_btnDeleteNewPurchaseRequisitionActionPerformed

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        row = jTable2.getSelectedRow(); // get index of selected row

        // get value of selected row
        String purchaseRequisitionId = String.valueOf(model.getValueAt(row, 0));
        String itemId = String.valueOf(model.getValueAt(row, 1));
        String itemName = String.valueOf(model.getValueAt(row, 2));
        String quantityRequested = String.valueOf(model.getValueAt(row, 3));

        txtPurchaseRequisitionId.setText(purchaseRequisitionId);
        txtItemName.setText(itemName);
        comboBoxItemId.setSelectedItem(itemId);
        spinnerQuantityRequested.setValue(Integer.valueOf(quantityRequested));
    }//GEN-LAST:event_jTable2MouseReleased

    private void btnEditNewPurchaseRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNewPurchaseRequisitionActionPerformed
        String quantityRequested;
        
        if(row==-1){
            JOptionPane.showMessageDialog(this, "Please select a row to edit");
        }
        else {
            String purchaseRequisitionId = txtPurchaseRequisitionId.getText();
            String itemName = txtItemName.getText();
            String itemId = (String) comboBoxItemId.getSelectedItem();


            // validate input
            if ((int) spinnerQuantityRequested.getValue() <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity Requested must be more than 0", "Invalid Quanity Requested", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {
                quantityRequested = Integer.toString((int) spinnerQuantityRequested.getValue());
            }
            
            String editedRow[] = {purchaseRequisitionId, itemId, itemName, quantityRequested};

            model.removeRow(row);
            model.insertRow(row, editedRow);
            clearTextField();
            row=-1;
            txtPurchaseRequisitionId.setText(nextPurchaseRequisitionId);
        }

    }//GEN-LAST:event_btnEditNewPurchaseRequisitionActionPerformed

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void btnClearNewPurchaseRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearNewPurchaseRequisitionActionPerformed
        clearTextField();
        txtPurchaseRequisitionId.setText(nextPurchaseRequisitionId);
    }//GEN-LAST:event_btnClearNewPurchaseRequisitionActionPerformed

    private void btnAddNewPurchaseRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewPurchaseRequisitionActionPerformed
        String itemId;
        String itemName;
        String quantityRequested;
        
        String purchaseRequisitionId = txtPurchaseRequisitionId.getText();

        // validate input
        if ("".equals(txtItemName.getText())) {
            JOptionPane.showMessageDialog(null, "Please select an item to create purchase requisition", "No Item Selected", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            itemName = txtItemName.getText();
            itemId = (String) comboBoxItemId.getSelectedItem();
        }
        
        if ((int) spinnerQuantityRequested.getValue() <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity Requested must be more than 0", "Invalid Quanity Requested", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            quantityRequested = Integer.toString((int) spinnerQuantityRequested.getValue());
        }

        String newRow[] = {purchaseRequisitionId, itemId, itemName, quantityRequested};

        model.addRow(newRow);

        clearTextField();
        updateNewPurchaseRequisitionId();
    }//GEN-LAST:event_btnAddNewPurchaseRequisitionActionPerformed

    private void btnSaveNewPurchaseRequisitionToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveNewPurchaseRequisitionToFileActionPerformed
        int rowCount = jTable2.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            // Extract the data from each row
            String requisitionId = (String) jTable2.getValueAt(i, 0);
            String itemId = (String) jTable2.getValueAt(i, 1);
            String quantityRequestedString = (String) jTable2.getValueAt(i, 3);

            int quantityRequested;
            // Parse the string int an int
            quantityRequested = Integer.parseInt((String) quantityRequestedString);

            // Append to file
            PurchaseRequisition new_pr = new PurchaseRequisition(requisitionId, userId, itemId, quantityRequested, true);
        }

        // remove all rows in table
        model.setRowCount(0);
        clearTextField();
        
        // refresh purchase requisition id
        updatePurchaseRequisitionId();

    }//GEN-LAST:event_btnSaveNewPurchaseRequisitionToFileActionPerformed

    private void btnClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSearchActionPerformed
        txtSearchBar.setText("");
        DefaultTableModel ob = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(ob);
        jTable2.setRowSorter(sorter);
        sorter.setRowFilter(null);
    }//GEN-LAST:event_btnClearSearchActionPerformed

    private void txtPurchaseRequisitionIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPurchaseRequisitionIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPurchaseRequisitionIdActionPerformed

    private void txtSearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBarActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        DefaultTableModel ob =(DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(ob);
        jTable2.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(txtSearchBar.getText()));
    }//GEN-LAST:event_btnSearchActionPerformed

    private void comboBoxItemIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemIdItemStateChanged
        int selectedIndex = comboBoxItemId.getSelectedIndex();
        
        // Check if the event is a selection
        if (evt.getStateChange() == ItemEvent.SELECTED && selectedIndex != -1) {
            // set the item name based on the selected index
             txtItemName.setText(itemNames.get(selectedIndex));
        }
    }//GEN-LAST:event_comboBoxItemIdItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewPurchaseRequisition;
    private javax.swing.JButton btnClearNewPurchaseRequisition;
    private javax.swing.JButton btnClearSearch;
    private javax.swing.JButton btnDeleteNewPurchaseRequisition;
    private javax.swing.JButton btnEditNewPurchaseRequisition;
    private javax.swing.JButton btnSaveNewPurchaseRequisitionToFile;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboBoxItemId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblWelcome4;
    private javax.swing.JSpinner spinnerQuantityRequested;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtPurchaseRequisitionId;
    private javax.swing.JTextField txtSearchBar;
    // End of variables declaration//GEN-END:variables
}
