/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package SalesManager;

import PurchaseManager.purchaseOrder;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author isabelle
 */
public class SalesRecordsPanel extends javax.swing.JPanel {
    private final DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private final String[] columnName = {"Sales ID", "Item ID", "Sale Date", "Quantity Sold", "Creation Date", "Creator ID", "Modified Date", "Modifier ID", "Modify Reason"};
    private int row = -1;
    private List<Map<String,String>> saleData = new ArrayList<>();
    private final Sale sale = new Sale();
    private List<String> itemIds =  new ArrayList<>();
    private List<String> itemNames =  new ArrayList<>();
    private String userId;
    /**
     * Creates new form SalesManagerSalesRecords
     * @param userId
     */
    public SalesRecordsPanel(String userId) {
        this.userId = userId;
        model.setColumnIdentifiers(columnName);
                
        initComponents();
        
        dateChooserCreation.setEnabled(false);
        dateChooserModified.setEnabled(false);
        
        Sale.Read();
        saleData = Sale.viewSaleData();
        System.out.println(saleData);
        
        String[] columns = {"saleId", "itemId", "saleDate", "quantitySold", "creationDate", "creatorId", "modifiedDate", "modifierId", "modifyReason"};

        if (saleData != null) {
            // Convert List<Map> into a format JTable can understand
            for (Map<String, String> rowData : saleData) {
                Object[] rowObj = new Object[columns.length];
                for (int i = 0; i < columns.length; i++) {
                    rowObj[i] = rowData.get(columns[i]);
                }
                model.addRow(rowObj);
            }
        }
        
        updateItemIdComboBox();
        System.out.println("Row count from model: " + jTable2.getModel().getRowCount());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome2 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        btnClearSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        dateChooserSaleDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboBoxItemId = new javax.swing.JComboBox<>();
        txtSalesId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSearchBar = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        spinnerQuantitySold = new javax.swing.JSpinner();
        btnClearNewSale = new javax.swing.JButton();
        btnDeleteNewSale = new javax.swing.JButton();
        btnEditNewSale = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        dateChooserCreation = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        txtCreatorId = new javax.swing.JTextField();
        dateChooserModified = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        txtModifierId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        lblWelcome2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblWelcome2.setText("Sales Record");

        txtItemName.setEditable(false);
        txtItemName.setBackground(new java.awt.Color(204, 204, 204));
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });

        btnClearSearch.setText("Clear");
        btnClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Sale Date:");

        jLabel1.setText("Item ID:");

        jLabel6.setText("Sales ID:");

        comboBoxItemId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemIdItemStateChanged(evt);
            }
        });

        txtSalesId.setEditable(false);
        txtSalesId.setBackground(new java.awt.Color(204, 204, 204));
        txtSalesId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalesIdActionPerformed(evt);
            }
        });

        jLabel3.setText("Item Name:");

        txtSearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBarActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel7.setText("Search Bar:");

        jTable2.setModel(model);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel4.setText("Quantity Sold:");

        btnClearNewSale.setText("Clear");
        btnClearNewSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearNewSaleActionPerformed(evt);
            }
        });

        btnDeleteNewSale.setText("Delete");
        btnDeleteNewSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNewSaleActionPerformed(evt);
            }
        });

        btnEditNewSale.setText("Edit");
        btnEditNewSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNewSaleActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel8.setText("Modify Reason:");

        jLabel9.setText("Creation Date:");

        dateChooserCreation.setBackground(new java.awt.Color(204, 204, 204));

        jLabel10.setText("Creator ID:");

        txtCreatorId.setEditable(false);
        txtCreatorId.setBackground(new java.awt.Color(204, 204, 204));
        txtCreatorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreatorIdActionPerformed(evt);
            }
        });

        dateChooserModified.setBackground(new java.awt.Color(204, 204, 204));

        jLabel11.setText("Modified Date:");

        txtModifierId.setEditable(false);
        txtModifierId.setBackground(new java.awt.Color(204, 204, 204));
        txtModifierId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModifierIdActionPerformed(evt);
            }
        });

        jLabel12.setText("Modifier ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblWelcome2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1014, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnClearSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtSalesId, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(comboBoxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dateChooserSaleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spinnerQuantitySold, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnClearNewSale)
                                            .addGap(17, 17, 17)
                                            .addComponent(btnDeleteNewSale)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnEditNewSale)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateChooserCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCreatorId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateChooserModified, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtModifierId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 936, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblWelcome2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnClearSearch)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(comboBoxItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtSalesId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(spinnerQuantitySold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateChooserSaleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(dateChooserCreation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(txtCreatorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11)
                    .addComponent(dateChooserModified, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(txtModifierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDeleteNewSale)
                        .addComponent(btnClearNewSale))
                    .addComponent(btnEditNewSale))
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void updateItemIdComboBox() {
        Map<String,List<String>> map = sale.updateItemSelectionList(itemNames, itemIds);
        
        itemNames = map.get("itemNames");
        itemIds = map.get("itemIds");

        // Update the combo box model dynamically
        for (String itemId: itemIds) {
            comboBoxItemId.addItem(itemId);
        }
        
        // set initial item selected
        comboBoxItemId.setSelectedIndex(-1);
        txtItemName.setText("");
    }
    
    private void clearTextField() {
        txtSalesId.setText("");
        txtItemName.setText("");
        comboBoxItemId.setSelectedIndex(-1);
        dateChooserSaleDate.setDate(null);
        spinnerQuantitySold.setValue(0);
        dateChooserCreation.setDate(null);
        txtCreatorId.setText("");
        dateChooserModified.setDate(null);
        txtModifierId.setText("");
        jTextArea1.setText("");
    }
    
    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void btnClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSearchActionPerformed
        txtSearchBar.setText("");
        DefaultTableModel ob = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(ob);
        jTable2.setRowSorter(sorter);
        sorter.setRowFilter(null);
    }//GEN-LAST:event_btnClearSearchActionPerformed

    private void txtSalesIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalesIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalesIdActionPerformed

    private void txtSearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBarActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        DefaultTableModel ob =(DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(ob);
        jTable2.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(txtSearchBar.getText()));
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        row = jTable2.getSelectedRow(); // get index of selected row

        // get value of selected row
        String saleId = String.valueOf(model.getValueAt(row, 0));
        String itemId = String.valueOf(model.getValueAt(row, 1));
        String saleDate = String.valueOf(model.getValueAt(row, 2));
        String quantitySold = String.valueOf(model.getValueAt(row, 3));
        String creationDate = String.valueOf(model.getValueAt(row, 4));
        String creatorId = String.valueOf(model.getValueAt(row,5));
        String modifiedDate = String.valueOf(model.getValueAt(row, 6));
        String modifierId = String.valueOf(model.getValueAt(row, 7));
        String modifyReason = String.valueOf(model.getValueAt(row, 8));

        txtSalesId.setText(saleId);
        txtCreatorId.setText(creatorId);
        if ("null".equals(modifyReason)) {
            jTextArea1.setText("");
        } else {
            jTextArea1.setText(modifyReason);
        }
        txtModifierId.setText(modifierId);

        comboBoxItemId.setSelectedItem(itemId);
        
        spinnerQuantitySold.setValue(Integer.valueOf(quantitySold));
        // convert string to date
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
        Date saleDateParsed= null;
        Date creationDateParsed= null;
        Date modifiedDateParsed= null;
        
        try {
            saleDateParsed = sdf.parse(saleDate);
            creationDateParsed = sdf.parse(creationDate);
            if (!"null".equals(modifiedDate)) {
                modifiedDateParsed = sdf.parse(modifiedDate);
            }
            System.out.println("Date parsed successfully");
        } catch (ParseException ex) {
            System.out.println("Date parsed unsuccessfully");
        }
        dateChooserSaleDate.setDate(saleDateParsed);
        dateChooserCreation.setDate(creationDateParsed);
        dateChooserModified.setDate(modifiedDateParsed);
        
    }//GEN-LAST:event_jTable2MouseReleased

    private void btnClearNewSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearNewSaleActionPerformed
        clearTextField();
    }//GEN-LAST:event_btnClearNewSaleActionPerformed

    private void btnDeleteNewSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNewSaleActionPerformed
        if(row==-1){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        }
        else {            
            int response = JOptionPane.showConfirmDialog(
                null, // Parent component (null means it's centered on the screen)
                "Are you sure you want to delete this sale record?", // Message
                "Delete Confirmation", // Title of the pop-up
                JOptionPane.YES_NO_OPTION, // Option type (Yes/No)
                JOptionPane.WARNING_MESSAGE // Icon type (warning)
            );

            // Check the user's response
            if (response == JOptionPane.YES_OPTION) {
                // User confirmed, proceed with the delete action
                
                // rewrite file
                Map<String, Sale> allSales = Sale.getSaleData();
                allSales.remove(txtSalesId.getText());
                Sale.setSaleData(allSales);
                Sale.rewriteFile();
                
                // remove from table
                model.removeRow(row);
                clearTextField();
                row=-1;

                clearTextField();
            }
            
            System.out.println("Row count from model: " + jTable2.getModel().getRowCount());
        }  

    }//GEN-LAST:event_btnDeleteNewSaleActionPerformed

    private void btnEditNewSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNewSaleActionPerformed
        if(row==-1){
            JOptionPane.showMessageDialog(this, "Please select a row to edit");
        }
        else {            
            int response = JOptionPane.showConfirmDialog(
                null, // Parent component (null means it's centered on the screen)
                "Are you sure you want to edit this sale record?", // Message
                "Edit Confirmation", // Title of the pop-up
                JOptionPane.YES_NO_OPTION, // Option type (Yes/No)
                JOptionPane.WARNING_MESSAGE // Icon type (warning)
            );

            // Check the user's response
            if (response == JOptionPane.YES_OPTION) {
                // User confirmed, proceed with the edit action
                
                int quantitySold;
                Date saleDate;
                String modifyReason;
                
                // validate input for quantity sold 
                if ((int) spinnerQuantitySold.getValue() <= 0) {
                    JOptionPane.showMessageDialog(null, "Quantity Sold must be more than 0", "Invalid Quanity Sold Amount", JOptionPane.INFORMATION_MESSAGE);
                    return;
                } else {
                    quantitySold = (int) spinnerQuantitySold.getValue();
                }

                // validate input for sale date
                Date currentDate = new Date();
                if (dateChooserSaleDate.getDate() == null) {
                    JOptionPane.showMessageDialog(null, "Please select a sale date", "Missing Sale Date", JOptionPane.INFORMATION_MESSAGE);
                    return;
                } else {
                    if (dateChooserSaleDate.getDate().after(currentDate)) {
                        JOptionPane.showMessageDialog(null, "Sale Date must not be after today's date", "Invalid Sale Date", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    } else {
                        saleDate = dateChooserSaleDate.getDate();
                    }
                }
                
                // validate input for modifyReason
                if ("".equals(jTextArea1.getText())) {
                    JOptionPane.showMessageDialog(null, "Please enter a reason for modification", "Missing Modify Reason", JOptionPane.INFORMATION_MESSAGE);
                    return;
                } else {
                    modifyReason = jTextArea1.getText();
                }
                
                String saleId = txtSalesId.getText();
                String itemId = (String) comboBoxItemId.getSelectedItem();
                Date creationDate = dateChooserCreation.getDate();
                String creatorId = txtCreatorId.getText();
                Date modifiedDate = new Date();            
                String modifierId = userId;

                // Write to file
                sale.updateSaleRecord(saleId, itemId, saleDate, quantitySold, modifiedDate, modifierId, modifyReason);
                
                // convert date to string
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                String creationDateString = sdf.format(creationDate);
                String modifiedDateString = sdf.format(modifiedDate);
                String saleDateString = sdf.format(saleDate);

                // update table
                String editedRow[] = {saleId, itemId, saleDateString, Integer.toString(quantitySold), creationDateString, creatorId, modifiedDateString, modifierId, modifyReason};

                model.removeRow(row);
                model.insertRow(row, editedRow);
                row=-1;
                
                clearTextField();
            }
        }    
    }//GEN-LAST:event_btnEditNewSaleActionPerformed

    private void txtCreatorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreatorIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreatorIdActionPerformed

    private void txtModifierIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModifierIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModifierIdActionPerformed

    private void comboBoxItemIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemIdItemStateChanged
         // Get the selected index
        int selectedIndex = comboBoxItemId.getSelectedIndex();
        
        // Check if the event is a selection
        if (evt.getStateChange() == ItemEvent.SELECTED && selectedIndex != -1) {
            // set the item name based on the selected index
             txtItemName.setText(itemNames.get(selectedIndex));
        }      
    }//GEN-LAST:event_comboBoxItemIdItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearNewSale;
    private javax.swing.JButton btnClearSearch;
    private javax.swing.JButton btnDeleteNewSale;
    private javax.swing.JButton btnEditNewSale;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboBoxItemId;
    private com.toedter.calendar.JDateChooser dateChooserCreation;
    private com.toedter.calendar.JDateChooser dateChooserModified;
    private com.toedter.calendar.JDateChooser dateChooserSaleDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblWelcome2;
    private javax.swing.JSpinner spinnerQuantitySold;
    private javax.swing.JTextField txtCreatorId;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtModifierId;
    private javax.swing.JTextField txtSalesId;
    private javax.swing.JTextField txtSearchBar;
    // End of variables declaration//GEN-END:variables
}
