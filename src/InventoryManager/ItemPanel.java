/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package InventoryManager;

import FinanceManager.*;
import InventoryManager.Supplier;
import InventoryManager.Item;
import PurchaseManager.purchaseOrder;
import Utility.InvalidValue;
import Utility.duplicate_id;
import Utility.txt;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class ItemPanel extends javax.swing.JPanel {
        
    public ItemPanel() {
        initComponents();
    }
    
    private String[] loadSupplierForItemForm() {
        String[] suppliers = Supplier.getAll_sp().keySet().toArray(String[]::new);

        // Clear existing items in the combo box before populating
//        supIdCb.removeAllItems();  // Clears the combo box for fresh data

        // Optional: Display a message if no suppliers found
        if (suppliers.length == 0) {
            System.out.println("No suppliers found.");
        } 

        return suppliers;

    }
    
    private void sortTableByItemId() {
        try {
            Map<String, Item> items = Item.getAll_item();
            Map sorted_item = items.entrySet().stream()
                .sorted(Map.Entry.comparingByKey()) 			
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
                (oldValue, newValue) -> oldValue, LinkedHashMap::new));

            Item.setAll_item(sorted_item);

             item_table.setModel(Item.populateTable());
            // Update the file with the sorted data
            Item.rewriteFile();

//            // Clear the table model
//            itemModel.setRowCount(0);
//
//            // Add sorted data back into the table model
//            for (Map<String, String> item : items) {
//                itemModel.addRow(new Object[]{
//                    item.get("itemID"),
//                    item.get("itemName"),
//                    item.get("description"),
//                    item.get("category"),
//                    item.get("unitPrice"),
//                    item.get("supplierID"),
//                    item.get("stockLevel"),
//                    item.get("reorderLevel"),
//                    item.get("itemEntryDate")
//                });
//            }
//
//            // Update the file with the sorted data
//            txt.Write(items, file);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error updating the item file: " + e.getMessage(),
                                          "File Update Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            System.out.println("An error occurred while sorting: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        amountOfItemTf = new javax.swing.JTextField();
        itemNameTf = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        itemReorderLevelTf = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        itemDescriptionTa = new javax.swing.JTextArea();
        clearItemBtn = new javax.swing.JButton();
        addItemBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        editItemBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        categoryCb = new javax.swing.JComboBox<>();
        deleteItemBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        item_table = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        itemPricePerUnitTf = new javax.swing.JTextField();
        itemEntryDateJCal = new com.toedter.calendar.JDateChooser();
        itemIdTf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        supIdCb = new javax.swing.JComboBox<>(loadSupplierForItemForm());
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BT_import = new javax.swing.JButton();
        BT_generate = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(880, 600));

        jLabel14.setText("Item Reorder Level");

        jLabel9.setText("Item Description");

        itemDescriptionTa.setColumns(20);
        itemDescriptionTa.setRows(5);
        jScrollPane3.setViewportView(itemDescriptionTa);

        clearItemBtn.setText("CLEAR");
        clearItemBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearItemBtnMouseClicked(evt);
            }
        });
        clearItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearItemBtnActionPerformed(evt);
            }
        });

        addItemBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addItemBtn.setText("ADD");
        addItemBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemBtnMouseClicked(evt);
            }
        });
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("Category");

        editItemBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        editItemBtn.setText("EDIT");
        editItemBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editItemBtnMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ITEM");
        jLabel1.setPreferredSize(new java.awt.Dimension(218, 64));

        categoryCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C" }));
        categoryCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCbActionPerformed(evt);
            }
        });

        deleteItemBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteItemBtn.setText("DELETE");
        deleteItemBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteItemBtnMouseClicked(evt);
            }
        });

        item_table.setModel(Item.populateTable());
        item_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                item_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(item_table);

        jLabel11.setText("Item Price / Unit");

        jLabel15.setText("Item Entry Date");

        itemIdTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemIdTfActionPerformed(evt);
            }
        });

        jLabel12.setText("Supplier ID");

        supIdCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supIdCbActionPerformed(evt);
            }
        });

        jLabel7.setText("Item ID");

        jLabel13.setText("Amount of Item");

        jLabel8.setText("Item Name");

        BT_import.setBackground(new java.awt.Color(102, 102, 102));
        BT_import.setForeground(new java.awt.Color(255, 255, 255));
        BT_import.setText("Import Batch");
        BT_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_importActionPerformed(evt);
            }
        });

        BT_generate.setBackground(new java.awt.Color(102, 102, 102));
        BT_generate.setForeground(new java.awt.Color(255, 255, 255));
        BT_generate.setText("Generate List");
        BT_generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_generateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(BT_import, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(itemNameTf)
                                        .addComponent(itemIdTf)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(itemEntryDateJCal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(128, 128, 128)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(27, 27, 27)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(categoryCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(itemPricePerUnitTf)
                                        .addComponent(amountOfItemTf, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(itemReorderLevelTf)
                                        .addComponent(supIdCb, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BT_generate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(98, 98, 98)
                                    .addComponent(clearItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(editItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(deleteItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(categoryCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(itemNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(itemPricePerUnitTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(supIdCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(amountOfItemTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(itemReorderLevelTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15))
                            .addComponent(itemEntryDateJCal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BT_import, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BT_generate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(124, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearItemBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearItemBtnMouseClicked
        categoryCb.setSelectedIndex(-1);  // This will unselect the ComboBox
        itemEntryDateJCal.setDate(null);
        itemIdTf.setText("");            // Assuming itemIdTf is the text field for Item ID
        itemIdTf.setEnabled(true);
        itemNameTf.setText("");        // Text field for Item Name
        itemDescriptionTa.setText("");  // Text field for Description
        categoryCb.setSelectedItem("");  // ComboBox for Category
        itemPricePerUnitTf.setText("");  // Text field for Unit Price
        supIdCb.setSelectedIndex(-1);    // Text field for Supplier ID
        amountOfItemTf.setText("");  // Text field for Stock Level
    }//GEN-LAST:event_clearItemBtnMouseClicked

    private void addItemBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemBtnMouseClicked
        // Event Listener for Add Button
        try {
            // Extract new item details
            String itemIdText = itemIdTf.getText().trim();
            if (!itemIdText.matches("\\d+")) {  // Validate if the input is a valid number
                throw new InvalidValue("Item ID must be a valid number.");
            }
            if (Integer.parseInt(itemIdText) <= 0) {
                throw new InvalidValue("Item ID cannot be zero or less than zero.");
            }
            int newItemIdNumber = Integer.parseInt(itemIdText);  // Numeric part of the input ID
            String formattedItemId = String.format("Item%03d", newItemIdNumber);  // Format as Item001, Item002, etc.

            String newItemName = itemNameTf.getText().trim();
            if (newItemName.isEmpty()) {
                throw new InvalidValue("Item Name cannot be empty.");
            }

            String newDescription = itemDescriptionTa.getText().trim();
            if (newDescription.isEmpty()) {
                throw new InvalidValue("Description cannot be empty.");
            }

            String newCategory = categoryCb.getSelectedItem().toString();
            if (newCategory.isEmpty()) {
                throw new InvalidValue("Please select a valid category.");
            }

            // Ensure unit price is stored with 2 decimal places
            String itemPriceText = itemPricePerUnitTf.getText().trim();
            if (!itemPriceText.matches("\\d+(\\.\\d{1,2})?")) {  // Validate for valid price (e.g., 30.0 or 30.00)
                throw new InvalidValue("Unit Price must be a valid positive number.");
            }
            double newUnitPrice = Double.parseDouble(itemPriceText);

            // Format to 2 decimal places
            String formattedPrice = String.format("%.2f", newUnitPrice);

            // Allow supplierID to be a string, not just numeric
            String supplierIdText = supIdCb.getSelectedItem().toString().trim();
            if (supplierIdText.isEmpty()) {  // Check if the supplier ID is non-empty
                throw new InvalidValue("Supplier ID must be a valid non-empty string.");
            }

            String stockLevelText = amountOfItemTf.getText().trim();
            if (!stockLevelText.matches("\\d+")) {  // Validate if the stock level is a valid number
                throw new InvalidValue("Stock Level must be a valid number.");
            }
            int newStockLevel = Integer.parseInt(stockLevelText);

            String reorderLevelText = itemReorderLevelTf.getText().trim();
            if (!reorderLevelText.matches("\\d+")) {  // Validate if the reorder level is a valid number
                throw new InvalidValue("Reorder Level must be a valid number.");
            }
            int newReorderLevel = Integer.parseInt(reorderLevelText);

            Date newEntryDate = new Date();  // Current date

            // Check if the numeric part of the new ID already exists in the file
            boolean idExists = Item.getAll_item().keySet().stream()
            .anyMatch(item -> {
                String existingItemId = item.replaceAll("[^0-9]", "");  // Extract numeric part
                return Integer.parseInt(existingItemId) == newItemIdNumber;
            });

            if (idExists) {
                // Show an error message if itemID already exists
                JOptionPane.showMessageDialog(null, "Error: Item ID " + formattedItemId + " already exists!", "Duplicate Item ID", JOptionPane.ERROR_MESSAGE);
            } else {
                // Create a new Item object
                Item newItemObj = new Item(
                    newItemIdNumber, newItemName, newDescription, newCategory,
                    newUnitPrice, supplierIdText, newStockLevel, newReorderLevel, newEntryDate
                );

                // Debug: Print the new item details
                // System.out.println(newItemObj.toString());

                // Optionally add the new item to the table
                ((DefaultTableModel)item_table.getModel()).addRow(new Object[]{
                    newItemObj.getItemID(),
                    newItemObj.getItemName(),
                    newItemObj.getDescription(),
                    newItemObj.getCategory(),
                    String.format("RM %.2f", newItemObj.getUnitPrice()),
                    newItemObj.getSupplierID(),
                    newItemObj.getStockLevel(),
                    newItemObj.getReorderLevel(),
                    newItemObj.getItemEntryDate()
                });

                JOptionPane.showMessageDialog(null, "Items added successfully.");

                sortTableByItemId();  // Sort the table after adding the new item
                categoryCb.setSelectedIndex(-1);  // This will unselect the ComboBox
                itemEntryDateJCal.setDate(null);
                itemIdTf.setText("");            // Assuming itemIdTf is the text field for Item ID
                itemNameTf.setText("");        // Text field for Item Name
                itemDescriptionTa.setText("");  // Text field for Description
                categoryCb.setSelectedItem("");  // ComboBox for Category
                itemPricePerUnitTf.setText("");  // Text field for Unit Price
                supIdCb.setSelectedIndex(-1);    // Text field for Supplier ID
                amountOfItemTf.setText("");  // Text field for Stock Level
                itemReorderLevelTf.setText("");
            }
        } catch (InvalidValue e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "General Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addItemBtnMouseClicked

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addItemBtnActionPerformed

    private void editItemBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editItemBtnMouseClicked
        if (itemIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Item ID.");
            return;
        } else if (itemNameTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Item Name.");
            return;
        } else if (itemDescriptionTa.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Description.");
            return;
        } else if (itemPricePerUnitTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Unit Price.");
            return;
        } else if (supIdCb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the Supplier ID.");
            return;
        } else if (amountOfItemTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Stock Level.");
            return;
        } else if (itemReorderLevelTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Reorder Level.");
            return;
        } else if (categoryCb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select a Category.");
            return;
        }

        try {
            // Read the existing items from the file
            boolean itemFound = false;
            Map<String, Item> all_it = Item.getAll_item();

            if (all_it.get(itemIdTf.getText()) != null){
                itemFound = true;
                Item updated_it = all_it.get(itemIdTf.getText());
                updated_it.editItem(itemNameTf.getText(), itemDescriptionTa.getText(),
                    categoryCb.getSelectedItem().toString(), Double.parseDouble(itemPricePerUnitTf.getText()),
                    supIdCb.getSelectedItem().toString(), Integer.parseInt(amountOfItemTf.getText()),
                    Integer.parseInt(itemReorderLevelTf.getText()), itemEntryDateJCal.getDate());
                all_it.put(itemIdTf.getText(), updated_it);
            }

            // If item was found and updated
            if (itemFound) {
                // Update the table with the new data
                for (int i = 0; i < item_table.getRowCount(); i++) {
                    if (item_table.getValueAt(i, 0).equals(itemIdTf.getText())) {
                        item_table.setValueAt(itemNameTf.getText(), i, 1);
                        item_table.setValueAt(itemDescriptionTa.getText(), i, 2);
                        item_table.setValueAt(categoryCb.getSelectedItem().toString(), i, 3);
                        item_table.setValueAt(itemPricePerUnitTf.getText(), i, 4);

                        // Get the selected supplier ID from the combo box
                        String selectedSupplierID = (String) supIdCb.getSelectedItem();
                        item_table.setValueAt(selectedSupplierID, i, 5);

                        item_table.setValueAt(amountOfItemTf.getText(), i, 6);
                        item_table.setValueAt(itemReorderLevelTf.getText(), i, 7);
                        item_table.setValueAt(itemEntryDateJCal.getDate().toString(), i, 8);
                        break;
                    }
                }

                // Show success message
                JOptionPane.showMessageDialog(null, "Item details updated successfully.");
            } else {
                // Item ID not found, show error message
                JOptionPane.showMessageDialog(null, "Item ID does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            categoryCb.setSelectedIndex(-1);  // This will unselect the ComboBox
            itemEntryDateJCal.setDate(null);
            itemIdTf.setText("");            // Assuming itemIdTf is the text field for Item ID
            itemIdTf.setEnabled(true);
            itemNameTf.setText("");        // Text field for Item Name
            itemDescriptionTa.setText("");  // Text field for Description
            categoryCb.setSelectedItem("");  // ComboBox for Category
            itemPricePerUnitTf.setText("");  // Text field for Unit Price
            supIdCb.setSelectedIndex(-1);    // Text field for Supplier ID
            amountOfItemTf.setText("");  // Text field for Stock Level
            itemReorderLevelTf.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error editing item: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editItemBtnMouseClicked

    private void categoryCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryCbActionPerformed

    private void deleteItemBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteItemBtnMouseClicked
        try {
            boolean itemFound = false;
            Map<String, Item> all_it = Item.getAll_item();

            if (all_it.get(itemIdTf.getText()) != null){
                itemFound = true;
            }

            // If the item ID exists
            if (itemFound) {
                // Show confirmation dialog before deleting
                int confirmation = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete item with ID " + itemIdTf.getText() + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION
                );

                // If the user confirms the deletion
                if (confirmation == JOptionPane.YES_OPTION) {
                    // Remove the supplier from the list
                    all_it.remove(itemIdTf.getText());
                    Item.setAll_item(all_it);

                    // Write the updated list back to the file
                    Item.rewriteFile();

                    // Remove the item from the table as well
                    for (int i = 0; i < item_table.getRowCount(); i++) {
                        if (item_table.getValueAt(i, 0).equals(itemIdTf.getText())) {
                            ((DefaultTableModel)item_table.getModel()).removeRow(i);
                            break;
                        }
                    }

                    // Show success message
                    JOptionPane.showMessageDialog(null, "Item with ID " + itemIdTf.getText() + " has been deleted.");

                    // Clear the text fields after deletion
                    categoryCb.setSelectedIndex(-1);  // This will unselect the ComboBox
                    itemEntryDateJCal.setDate(null);
                    itemIdTf.setText("");            // Assuming itemIdTf is the text field for Item ID
                    itemIdTf.setEnabled(true);
                    itemNameTf.setText("");        // Text field for Item Name
                    itemDescriptionTa.setText("");  // Text field for Description
                    categoryCb.setSelectedItem("");  // ComboBox for Category
                    itemPricePerUnitTf.setText("");  // Text field for Unit Price
                    supIdCb.setSelectedIndex(-1);    // Text field for Supplier ID
                    amountOfItemTf.setText("");  // Text field for Stock Level
                    itemReorderLevelTf.setText("");
                }
            } else {
                // If item ID does not exist, show error message
                JOptionPane.showMessageDialog(null, "Item ID does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error deleting item: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        sortTableByItemId(); // Sort the table after deletion
    }//GEN-LAST:event_deleteItemBtnMouseClicked

    private void item_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_item_tableMouseClicked
        int row = item_table.getSelectedRow();  // This line ensures you're getting the selected row index

        // Check if a row is selected
        if (row != -1) {
            // Retrieve data from the selected row
            String itemId = item_table.getValueAt(row, 0).toString();         // Item ID
            String itemName = item_table.getValueAt(row, 1).toString();       // Item Name
            String description = item_table.getValueAt(row, 2).toString();   // Description
            String category = item_table.getValueAt(row, 3).toString();      // Category
            String unitPrice = item_table.getValueAt(row, 4).toString();     // Unit Price
            String supplierID = item_table.getValueAt(row, 5).toString();    // Supplier ID
            String stockLevel = item_table.getValueAt(row, 6).toString();    // Stock Level
            String reorderLevel = item_table.getValueAt(row, 7).toString();  // Reorder Level
            String itemEntryDate = item_table.getValueAt(row, 8).toString(); // Item Entry Date

            // Populate the text fields with the retrieved data
            itemIdTf.setText(itemId);            // Assuming itemIdTf is the text field for Item ID
            itemIdTf.setEnabled(false);
            itemNameTf.setText(itemName);        // Text field for Item Name
            itemDescriptionTa.setText(description);  // Text field for Description
            categoryCb.setSelectedItem(category);  // ComboBox for Category
            itemPricePerUnitTf.setText(unitPrice);  // Text field for Unit Price
            supIdCb.setSelectedItem(supplierID);    // Text field for Supplier ID
            amountOfItemTf.setText(stockLevel);  // Text field for Stock Level
            itemReorderLevelTf.setText(reorderLevel);  // Text field for Reorder Level

            // Handle the date setting using JCalendar
            try {
                Date itemDate = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH).parse(itemEntryDate);
                itemEntryDateJCal.setDate(itemDate);  // Set the date on the JCalendar component
            } catch (ParseException e) {
                System.err.println("Error parsing the date: " + e.getMessage());
            }
        } else {
            System.out.println("No row selected.");
        }
    }//GEN-LAST:event_item_tableMouseClicked

    private void itemIdTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemIdTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemIdTfActionPerformed

    private void supIdCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supIdCbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supIdCbActionPerformed

    private void clearItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearItemBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearItemBtnActionPerformed

    private void BT_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_importActionPerformed
        try {
            Item.ReadTxt("ExampleItem.txt");
            item_table.setModel(Item.populateTable());
        } catch (ParseException | duplicate_id | IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), 
                    "Import Batch Error", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BT_importActionPerformed

    private void BT_generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_generateActionPerformed
        try {
            String fileName = txt.getUniqueFileName();
            
            if (fileName != null){
                Item.writeTxt(fileName);
                JOptionPane.showMessageDialog(this, "A list of items is stored in the new " + fileName + ".txt file", 
                    "Item List Generated", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), 
                    "Generate List Error", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BT_generateActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_generate;
    private javax.swing.JButton BT_import;
    private javax.swing.JButton addItemBtn;
    private javax.swing.JTextField amountOfItemTf;
    private javax.swing.JComboBox<String> categoryCb;
    private javax.swing.JButton clearItemBtn;
    private javax.swing.JButton deleteItemBtn;
    private javax.swing.JButton editItemBtn;
    private javax.swing.JTextArea itemDescriptionTa;
    private com.toedter.calendar.JDateChooser itemEntryDateJCal;
    private javax.swing.JTextField itemIdTf;
    private javax.swing.JTextField itemNameTf;
    private javax.swing.JTextField itemPricePerUnitTf;
    private javax.swing.JTextField itemReorderLevelTf;
    private javax.swing.JTable item_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> supIdCb;
    // End of variables declaration//GEN-END:variables
}
