/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package InventoryManager;

import PurchaseManager.purchaseOrder;
import Utility.duplicate_id;
import Utility.editPermission;
import Utility.txt;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.*;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class SupplierPanel extends javax.swing.JPanel {
    editPermission permission;
        
    public SupplierPanel(editPermission permission) {
        initComponents();
        this.permission = permission;
        settingPermission();
    }
    
    private void settingPermission(){
        boolean readOnly = permission != editPermission.readOnly;
        supIdTf.setEnabled(readOnly);
        supNameTf.setEnabled(readOnly);
        supConNumTf.setEnabled(readOnly);
        supEmailTf.setEnabled(readOnly);
        addBtn.setVisible(readOnly);
        editBtn.setVisible(readOnly);
        deleteBtn.setVisible(readOnly);   
        BT_import.setVisible(readOnly);
    }
    
    private String[] loadSupplierForItemForm() {
        String[] suppliers = Supplier.getAll_sp().keySet().toArray(String[]::new);

        // Clear existing items in the combo box before populating
//        supIdCb.removeAllItems();  // Clears the combo box for fresh data

        // Optional: Display a message if no suppliers found
        if (suppliers.length == 0) {
            System.out.println("No suppliers found.");
        } 

        return suppliers;

    }
    
    private void sortTableBySupId() { 
        try {
            // Read the existing supplier data from the file
            Map<String, Supplier> suppliers = Supplier.getAll_sp();
            Map sorted_supplier = suppliers.entrySet().stream()
                .sorted(Map.Entry.comparingByKey()) 			
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
                (oldValue, newValue) -> oldValue, LinkedHashMap::new));

            Supplier.setAll_sp(sorted_supplier);

//            // Sort the supplier data by the "supId" field
//            suppliers.sort((supplier1, supplier2) -> {
//                String id1 = supplier1.get("supId").replaceAll("[^0-9]", ""); // Extract numeric part of ID
//                String id2 = supplier2.get("supId").replaceAll("[^0-9]", ""); // Extract numeric part of ID
//                return Integer.compare(Integer.parseInt(id1), Integer.parseInt(id2));
//            });

//            // Clear the table model
//            ((DefaultTableModel)jTable2.getModel()).setRowCount(0);
//
//            // Add sorted data back into the table model
//            for (Map<String, String> supplier : suppliers) {
//                ((DefaultTableModel)jTable2.getModel()).addRow(new Object[]{
//                    supplier.get("supId"),
//                    supplier.get("supName"),
//                    supplier.get("supConNum"),
//                    supplier.get("supEmail")
//                });
//            }

            
            supplier_table.setModel(Supplier.populateTable());
            // Update the file with the sorted data
            Supplier.rewriteFile();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error updating the supplier file: " + e.getMessage(),
                                          "File Update Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            System.out.println("An error occurred while sorting: " + ex.getMessage());
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BT_generate1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        supIdTf = new javax.swing.JTextField();
        supNameTf = new javax.swing.JTextField();
        supConNumTf = new javax.swing.JTextField();
        supEmailTf = new javax.swing.JTextField();
        clearBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        supplier_table = new javax.swing.JTable();
        BT_generate = new javax.swing.JButton();
        BT_import = new javax.swing.JButton();

        BT_generate1.setBackground(new java.awt.Color(102, 102, 102));
        BT_generate1.setForeground(new java.awt.Color(255, 255, 255));
        BT_generate1.setText("Generate List");
        BT_generate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_generate1ActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBtnMouseClicked(evt);
            }
        });
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtnMouseClicked(evt);
            }
        });
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Supplier ID");

        jLabel4.setText("Supplier Name");

        jLabel5.setText("Supplier Contact Number");

        jLabel6.setText("Supplier Email");

        clearBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        clearBtn.setText("CLEAR");
        clearBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearBtnMouseClicked(evt);
            }
        });
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(30, 30, 30)
                                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(30, 30, 30)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(supConNumTf)
                            .addComponent(supEmailTf, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(supIdTf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(supNameTf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(supIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(supNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(supConNumTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(supEmailTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SUPPLIER");

        // Load data into the Supplier table
        supplier_table.setModel(Supplier.populateTable());
        supplier_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supplier_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(supplier_table);

        BT_generate.setBackground(new java.awt.Color(102, 102, 102));
        BT_generate.setForeground(new java.awt.Color(255, 255, 255));
        BT_generate.setText("Generate List");
        BT_generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_generateActionPerformed(evt);
            }
        });

        BT_import.setBackground(new java.awt.Color(102, 102, 102));
        BT_import.setForeground(new java.awt.Color(255, 255, 255));
        BT_import.setText("Import Batch");
        BT_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BT_importActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(BT_import, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(59, 59, 59)
                        .addComponent(BT_generate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(83, 83, 83))))
            .addGroup(layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BT_import, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BT_generate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
                .addGap(112, 112, 112))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        // Validation checks for empty text fields
        if (supIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your ID.");
            return;
        } else if (supNameTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your Name.");
            return;
        } else if (supConNumTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your Contact Number.");
            return;
        } else if (supEmailTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter an email address.");
            return;
        } else if (!supEmailTf.getText().contains("@")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid email address (must contain '@').");
            return;
        }

        try {
            boolean supplierFound = false;
            Map<String, Supplier> all_sup = Supplier.getAll_sp();

            if (all_sup.get(supIdTf.getText()) != null){
                supplierFound = true;
                Supplier updated_sup = all_sup.get(supIdTf.getText());
                updated_sup.editSup(supIdTf.getText(), supNameTf.getText(), supEmailTf.getText(), supConNumTf.getText());
                all_sup.put(supIdTf.getText(), updated_sup);
            }

            // If supplier ID was found and updated
            if (supplierFound) {
                // Update the table with the new data
                for (int i = 0; i < supplier_table.getRowCount(); i++) {
                    if (supplier_table.getValueAt(i, 0).equals(supIdTf.getText())) {
                        supplier_table.setValueAt(supNameTf.getText(), i, 1);
                        supplier_table.setValueAt(supConNumTf.getText(), i, 2);
                        supplier_table.setValueAt(supEmailTf.getText(), i, 3);
                        break;
                    }
                }

                // Show success message
                JOptionPane.showMessageDialog(null, "Supplier details updated successfully.");
            } else {
                // Supplier ID not found, show error message
                JOptionPane.showMessageDialog(null, "Supplier ID does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Clear the fields after editing
            supIdTf.setText("");
            supIdTf.setEnabled(true);
            supNameTf.setText("");
            supConNumTf.setText("");
            supEmailTf.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error editing supplier: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editBtnMouseClicked

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtnMouseClicked
        // Validation to check if the supplier ID text field is empty
        if (supIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the Supplier ID to delete.");
            return;
        }

        try {
            boolean supplierFound = false;
            Map<String, Supplier> all_sup = Supplier.getAll_sp();

            if (all_sup.get(supIdTf.getText()) != null){
                supplierFound = true;
            }

            // If the supplier ID exists
            if (supplierFound) {
                // Show confirmation dialog before deleting
                int confirmation = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete supplier with ID " + supIdTf.getText() + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION
                );

                // If the user confirms the deletion
                if (confirmation == JOptionPane.YES_OPTION) {
                    // Remove the supplier from the list
                    all_sup.remove(supIdTf.getText());
                    Supplier.setAll_sp(all_sup);

                    // Write the updated list back to the file
                    Supplier.rewriteFile();

                    // Remove the supplier from the table as well
                    for (int i = 0; i < supplier_table.getRowCount(); i++) {
                        if (supplier_table.getValueAt(i, 0).equals(supIdTf.getText())) {
                            ((DefaultTableModel)supplier_table.getModel()).removeRow(i);
                            break;
                        }
                    }

                    // Show success message
                    JOptionPane.showMessageDialog(null, "Supplier with ID " + supIdTf.getText() + " has been deleted.");

                    // Clear the text fields after deletion
                    supIdTf.setText("");
                    supIdTf.setEnabled(true);
                    supNameTf.setText("");
                    supConNumTf.setText("");
                    supEmailTf.setText("");
                }
            } else {
                // If supplier ID does not exist, show error message
                JOptionPane.showMessageDialog(null, "Supplier ID does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error deleting supplier: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        sortTableBySupId();
    }//GEN-LAST:event_deleteBtnMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void addBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBtnMouseClicked
        // Validation checks for empty text fields
        if (supIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your ID.");
            return;
        } else if (supNameTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your Name.");
            return;
        } else if (supConNumTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your Contact Number.");
            return;
        } else if (!supEmailTf.getText().contains("@")) {
            // Email validation to ensure it contains '@'
            JOptionPane.showMessageDialog(null, "Please enter a valid email address (must contain '@').", "Invalid Email", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Event Listener for Add Button
        try {
            // Get the new supplier ID and details
            String formattedSupId = supIdTf.getText();
            int SupId_num = Integer.parseInt(formattedSupId.replaceAll("[^0-9]", "")); // Numeric part of the input ID
            String newSupName = supNameTf.getText();
            String newSupConNum = supConNumTf.getText();
            String newSupEmail = supEmailTf.getText();

            // Check if the numeric part of the new ID already exists in the file
            boolean idExists = Supplier.getAll_sp().keySet().stream()
            .anyMatch(supplier -> {
                String existingSupId = supplier.replaceAll("[^0-9]", ""); // Extract numeric part
                return Integer.parseInt(existingSupId) == SupId_num;
            });

            if (idExists) {
                // Show an error message if supId already exists
                JOptionPane.showMessageDialog(null, "Error: Supplier ID" + formattedSupId + " already exists!", "Duplicate Supplier ID", JOptionPane.ERROR_MESSAGE);
            } else {
                // Create a new Supplier object
                Supplier newSupplierObj = new Supplier(formattedSupId, newSupName, newSupEmail, newSupConNum);

                // Debug: Print the new supplier details
                System.out.println(newSupplierObj.toString());

                // Optionally add the new supplier to the table
                ((DefaultTableModel)supplier_table.getModel()).addRow(new Object[]{
                    newSupplierObj.getSupId(),
                    newSupplierObj.getSupName(),
                    newSupplierObj.getConNum(),
                    newSupplierObj.getSupEmail(),

                });
                sortTableBySupId();
                supIdTf.setText("");
                supIdTf.setEnabled(true);
                supNameTf.setText("");
                supConNumTf.setText("");
                supEmailTf.setText("");
                JOptionPane.showMessageDialog(null, "Supplier added successfully.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: Input only Numerical value for Supplier ID", "Wrong Type of Supplier ID", JOptionPane.ERROR_MESSAGE);
        }

        //        try {
            //            // Read the current supplier data from the file
            //            suppliers = txt.Read(file);
            //
            //            // Check if the supplier ID already exists
            //            for (Map<String, String> supplier : suppliers) {
                //                String existingSupId = supplier.get("supId");
                //                if (existingSupId != null && existingSupId.equals(supIdTf.getText())) {
                    //                    // If the ID exists, show a message and cancel the add operation
                    //                    JOptionPane.showMessageDialog(null, "Supplier Exists.");
                    //                    return;
                    //                }
                //            }

            // Create a new supplier map and add the values from the text fields
            //            Map<String, String> newSupplier = new LinkedHashMap<>();
            //            newSupplier.put("supId", supIdTf.getText());
            //            newSupplier.put("supName", supNameTf.getText());
            //            newSupplier.put("supConNum", supConNumTf.getText());
            //            newSupplier.put("supEmail", supEmailTf.getText());
            //
            //            Supplier newSupplierObj = new Supplier(Integer.parseInt(supIdTf.getText()), supNameTf.getText(), supConNumTf.getText(), supEmailTf.getText());
            //            txt.append("src/item/Supplier.txt", newSupplierObj.toString());
            //            System.out.println(newSupplierObj.toString());

            // Add the new supplier to the list
            //suppliers.add(newSupplier);

            // Write the updated list back to the file
            //txt.Write(suppliers, file);

            //            // Display a success message
            //            JOptionPane.showMessageDialog(null, "New supplier added successfully.");
            //
            //            // Optionally, refresh the table or UI
            //            // Add the new supplier as a row in the table
            //            model1.addRow(new Object[]{
                //                supIdTf.getText(),
                //                supNameTf.getText(),
                //                supConNumTf.getText(),
                //                supEmailTf.getText()
                //            });
        //
        //            // Clear the text fields after adding the supplier
        //            supIdTf.setText("");
        //            supNameTf.setText("");
        //            supConNumTf.setText("");
        //            supEmailTf.setText("");
        //
        //            // Optionally, refresh the table or UI
        //            this.validate();
        //            this.repaint();

        //        } catch (IOException e) {
        //            JOptionPane.showMessageDialog(null, "Error adding new supplier: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        //        }
    }//GEN-LAST:event_addBtnMouseClicked

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBtnActionPerformed

    private void clearBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBtnMouseClicked
        supIdTf.setText("");
        supIdTf.setEnabled(true);
        supNameTf.setText("");
        supConNumTf.setText("");
        supEmailTf.setText("");
    }//GEN-LAST:event_clearBtnMouseClicked

    private void supplier_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplier_tableMouseClicked
        // Get the selected row index
        int row = supplier_table.getSelectedRow();

        // Check if a row is selected
        if (row != -1) {
            // Retrieve data from the selected row
            String id = supplier_table.getValueAt(row, 0).toString();         // ID
            String name = supplier_table.getValueAt(row, 1).toString();       // Name
            String contactNumber = supplier_table.getValueAt(row, 2).toString(); // Contact Number
            String email = supplier_table.getValueAt(row, 3).toString();      // Email

            // Populate the text fields with the retrieved data
            supIdTf.setText(id);       // Assuming jTextFieldId is the text field for ID
            supIdTf.setEnabled(false);
            supNameTf.setText(name);   // Assuming jTextFieldName is the text field for Name
            supConNumTf.setText(contactNumber); // For Contact Number
            supEmailTf.setText(email); // For Email
        }

    }//GEN-LAST:event_supplier_tableMouseClicked

    private void BT_generate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_generate1ActionPerformed
        try {
            boolean unique = true;
            String txt = "";
            while (unique){
                txt = JOptionPane.showInputDialog(this, "Enter a new file name (e.g. \"Example\"):");
                File f = new File(txt);

                if(f.exists()){
                    JOptionPane.showMessageDialog(this, "The file name entered exists in the application directory. Please try again!",
                        "Duplicate File Name",
                        JOptionPane.WARNING_MESSAGE);
                } else {
                    unique = false;
                }
            }

            purchaseOrder.writeTxt(txt);
            JOptionPane.showMessageDialog(this, "A list of purchase orders is stored in the new " + txt + ".txt file",
                "Purchase Order List Generated",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                "Generate List Error",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BT_generate1ActionPerformed

    private void BT_generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_generateActionPerformed
        try {
            String fileName = txt.getUniqueFileName();

            if (fileName != null){
                Supplier.writeTxt(fileName);
                JOptionPane.showMessageDialog(this, "A list of suppliers is stored in the new " + fileName + ".txt file",
                    "Supplier List Generated",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                "Generate List Error",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BT_generateActionPerformed

    private void BT_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BT_importActionPerformed
        try {
            Supplier.ReadTxt("ExampleSupplier.txt");
            supplier_table.setModel(Item.populateTable());
        } catch (ParseException | duplicate_id | IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                "Import Batch Error",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BT_importActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_generate;
    private javax.swing.JButton BT_generate1;
    private javax.swing.JButton BT_import;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField supConNumTf;
    private javax.swing.JTextField supEmailTf;
    private javax.swing.JTextField supIdTf;
    private javax.swing.JTextField supNameTf;
    private javax.swing.JTable supplier_table;
    // End of variables declaration//GEN-END:variables
}
